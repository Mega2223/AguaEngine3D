package net.mega2223.lwjgltest.aguaengine3d.usecases.Airsim;

import net.mega2223.lwjgltest.aguaengine3d.graphics.objects.modeling.TexturedModel;
import net.mega2223.lwjgltest.aguaengine3d.mathematics.VectorTranslator;

@SuppressWarnings("unused")
public abstract class FlyingSimObject extends SimObject{

    //consts
    public static final boolean GEAR_DOWN = true;
    public static final boolean GEAR_UP = false;

    private float[] directionRadians;

    //local variables that differ for each model, should not be changeable
    protected final float weight, drag;
    protected final float engineStrenght, maxYawPush, maxPitch;

    //local variables for physics and stuff, should be calculated by the physics handlers and NOT changed externally
    private float speed = 0;
    private boolean gearState = true;

    //controller data that should be updatable by subclasses
    private float throttle = 0; // current propulsion generated by the engines
    private int flapState = 0; // self-explanatory
    private float yawControl = 0, pitchControl = 0;

    //todo actual constructor
    public FlyingSimObject(float[] vertices, int[] indices, float[] textureShift, String textureDir) {
        super(vertices, indices, textureShift, textureDir);
        this.weight = 1f;
        this.engineStrenght = 1f;
        this.maxYawPush = 1f;
        this.maxPitch = 1f;
        this.drag = .6f;
        this.directionRadians = new float[3];
    }

    public FlyingSimObject(TexturedModel model) {
        super(model);
        this.weight = 1f;
        this.engineStrenght = 1f;
        this.maxYawPush = 1f;
        this.maxPitch = 1f;
        this.drag = .6f;
        this.directionRadians = new float[3];

    }


    @Override
    public void doLogic(int itneration) {
        super.doLogic(itneration);
        clampVariables();
        //speed and drag calculations
        speed += getThrottle() * engineStrenght;
        speed -= speed*drag;
        if(speed == Float.NEGATIVE_INFINITY || speed == Float.POSITIVE_INFINITY || speed < 0){
            speed = 0;
        }

        //direction calculations
        float yawInfluence = yawControl * maxYawPush * speed;

        directionRadians[1] -= yawInfluence;

        //direction[1] = 1;
        directionRadians[2] = (float) (Math.PI/2);

        float[] predictionVec = PhysicsUtils.generatePredictionVector(speed, directionRadians[0], directionRadians[1], directionRadians[2]);

        VectorTranslator.addToVector(coords,predictionVec);

        //System.out.println(direction[0] + ":" + direction[1] + ":" + direction[2]);

        if(coords[1] <= 0){coords[1] = 0;}
    }

    void clampVariables(){
        if(yawControl < -1){yawControl = -1;}
        if(yawControl > 1){yawControl = 1;}
        if(pitchControl < -1){pitchControl = -1;}
        if(pitchControl > 1){pitchControl = 1;}
        if(throttle < 0){throttle = 0;}
        if(throttle > 1){throttle = 1;}
    }

    //"boy i sure do wish my file was bloated"
    //encapsulation:

    public float getSpeed() {
        return speed;
    }

    public boolean isGearState() {
        return gearState;
    }

    public float[] getDirectionRadians() {
        return directionRadians.clone();
    }

    public float getWeight() {
        return weight;
    }

    public float getEngineStrenght() {
        return engineStrenght;
    }

    public float getMaxYawPush() {
        return maxYawPush;
    }

    public float getMaxPitch() {
        return maxPitch;
    }

    public float getThrottle() {
        return throttle;
    }

    public int getFlapState() {
        return flapState;
    }

    public float getYawControl() {
        return yawControl;
    }

    public float getPitchControl() {
        return pitchControl;
    }
    //setters for the controls
    public void setThrottle(float throttle) {
        this.throttle = throttle;
    }

    public void setYawControl(float yawControl) {
        this.yawControl = yawControl;
    }

    public void setPitchControl(float pitchControl) {
        this.pitchControl = pitchControl;
    }

    public void addToPitchControl(float amount){
        this.pitchControl+=amount;
    }
    public void removeFromPitchControl(float amount){
        this.pitchControl-=amount;
    }
    public void addToYawControl(float amount){
        this.yawControl+=amount;
    }
    public void removeFromYawControl(float amount){
        this.yawControl-=amount;
    }
    public void addToThrottleControl(float amount){
        this.throttle+=amount;
    }
    public void removeFromThrottleControl(float amount){
        this.throttle-=amount;
    }

}
